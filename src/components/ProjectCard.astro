---
import Image from 'astro/components/Image.astro';
import TagsDropdown from './TagsDropdown.astro';
import ProjectLink, {
    type Props as ProjectLinkProps,
} from './ProjectLink.astro';

interface Props {
    title: string;
    tags?: string[];
    imageName?: string;
    links: {
        type: ProjectLinkProps['type'];
        url: string;
    }[];
}

const { title, tags, imageName, links } = Astro.props;
---

<article class:list={{ short: !imageName }}>
    {
        imageName && (
            <>
                <div class="background-container" role="presentation">
                    <Image
                        src={`/screenshots/${imageName}.png`}
                        alt=""
                        width={350}
                        height={184}
                        class="background"
                    />
                </div>
                <Image
                    src={`/screenshots/${imageName}.png`}
                    alt=""
                    width={350}
                    height={184}
                    class="image"
                    role="presentation"
                />
            </>
        )
    }
    <div class="description">
        <h2>
            <a href={links[0].url} target="_blank" rel="noopener">{title}</a>
        </h2>
        <p><slot /></p>
        <footer>
            {tags && <TagsDropdown tags={tags} />}
            <div class="links">
                {
                    links.map((link) => (
                        <ProjectLink url={link.url} type={link.type} />
                    ))
                }
            </div>
        </footer>
    </div>
</article>

<style>
    h2 {
        color: var(--text-color);
        font-weight: bolder;
        font-size: 2rem;
        margin: 0;
        text-shadow: none;
    }
    a {
        text-shadow: none;
        text-decoration: underline;
        background-clip: text;
        color: transparent;
        background-color: var(--text-color);
    }
    a:is(:hover, :focus, :active) {
        background-image: linear-gradient(
            to top,
            var(--tag-background-1),
            var(--text-color)
        );
        background-clip: text;
        color: transparent;
    }
    article {
        background-color: var(--background-2);
        border-radius: 10px;
        display: flex;
        position: relative;
        box-shadow: var(--project-card-shadow);
    }
    .image {
        height: 100%;
        object-fit: cover;
    }
    .image,
    .background-container {
        border-radius: 10px 0 0 10px;
    }
    .short {
        max-width: calc(50% - 10px);
        width: 100%;
    }
    .links {
        margin-left: auto;
    }
    .description {
        margin-left: 1ch;
        margin-right: 1ch;
        margin-bottom: 0.5em;
        display: flex;
        flex-direction: column;
        text-shadow: var(--text-shadow);
    }
    .background {
        scale: 1.5 1.1;
        filter: blur(50px);
        mix-blend-mode: hue;
        position: absolute;
        left: 0;
    }
    .background-container {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        overflow: hidden;
    }
    article > :not(.background-container) {
        z-index: 1;
    }
    footer {
        text-align: left;
        margin-top: auto;
        display: flex;
        height: 1.5em;
    }
    @media screen and (max-width: 680px) {
        article {
            flex-direction: column;
            justify-content: center;
        }
        .short {
            max-width: 100%;
        }
        .image,
        .background-container {
            border-radius: 10px 10px 0 0;
        }
        .image {
            width: 100%;
        }
        .background {
            scale: 1.1 1.5;
            filter: blur(50px);
            right: 0;
            top: 0;
        }
    }
</style>
